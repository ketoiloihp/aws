AWSTemplateFormatVersion: 2010-09-09
Description: 'Launch one single docker-registry server by CloudFormation'
Mappings:
  RegionMap:
    # using base centos 7 with some simple setup for initial
    ap-southeast-1:
      AMI: ami-a6b7cb4c

Parameters:
  KeyPairName:
    Description: 'choose one keypair exist'
    Type: AWS::EC2::KeyPair::KeyName
  VpcId:
    Description: 'VPCId indentifier'
    Type: AWS::EC2::VPC::Id
  SubnetId:
    Description: 'SubnetIds indentifier'
    Type: 'AWS::EC2::Subnet::Id'
  DockerImage:
    Description: 'Path of the Docker Registry image to use (format: ''[<registry>[:<port>]/]<repository>[:<version>]'')'
    Type: String
    Default: registry:2.6.2
  RegistryAuth:
    Description: Comma-delimited list of htpasswd strings that grant access to the registry (e.g., 'user1:$apr1$BspgNsum$8ZdGQ/KXRFccnlRXF6StP.')
    Type: CommaDelimitedList
  S3BucketName:
    Description: Bucket to use for Docker images (e.g., 'mycompany-docker')
    Type: String
    Default: 'mycompany-docker'

Resources:
  repoDocker:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      WebsiteConfiguration:
        IndexDocument: 'index.html'
        ErrorDocument: 'error.html'
  IAMUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
      - PolicyName: S3Access
        PolicyDocument:
          Statement:
          - Action: s3:*
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3BucketName}'
          - Action: s3:*
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3BucketName}/*'
      - PolicyName: IAMAccess
        PolicyDocument:
          Statement:
          - Effect: Allow
            NotAction: iam:*
            Resource: "*"
  HostKeys:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        Ref: IAMUser
  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub ${AWS::StackName} EC2 security group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - CidrIp: <my_ip>/32
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
  MyEC2Instance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            '/opt/docker-registry/docker-compose.yml':
              content: !Sub |
                version: "3.3"
                services:
                  nginx:
                    image: nginx:alpine
                    container_name: nginx
                    restart: always
                    ports:
                      - "80:80"
                    volumes:
                      - /opt/nginx/nginx:/etc/nginx/conf.d/
                      - /opt/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
                      - /opt/docker-registry/htpasswd:/etc/nginx/conf.d/nginx.htpasswd:ro
                    links:
                      - docker-registry:docker-registry
                  docker-registry:
                    image: {{docker_image}}
                    deploy:
                      replicas: 1
                      restart_policy:
                        condition: on-failure
                    ports:
                      - "5000:5000"
                    volumes:
                      - "/opt/docker-registry:/registry-conf"
                      - /opt/docker-registry/config.yaml:/etc/docker/registry/config.yml:ro
              context:
                docker_image:
                  Ref: DockerImage
                access_key:
                  Ref: HostKeys
                secret_key:
                  Fn::GetAtt:
                  - HostKeys
                  - SecretAccessKey
                s3_bucket: !Ref S3BucketName
                s3_region: !Ref 'AWS::Region'
                magic_string: fL3YHeP1cmCHH5FWm1PKaO7cdo0VXkabAgiSEestXYZDgAiQcDCsTiWpOaukB1e9
              mode: '000700'
              owner: root
              group: root
            '/opt/docker-registry/config.yaml':
              content: !Sub |
                # see more config here https://docs.docker.com/registry/configuration/
                version: 0.1
                log:
                  level: debug
                  fields:
                    service: registry
                storage:
                  s3:
                    accesskey: {{access_key}}
                    secretkey: {{secret_key}}
                    region: {{s3_region}}
                    bucket: {{s3_bucket}}
                    encrypt: true
                http:
                  addr: :5000
                  headers:
                    X-Content-Type-Options: [nosniff]
                health:
                  storagedriver:
                    enabled: true
                    interval: 10s
                    threshold: 3
              context:
                access_key:
                  Ref: HostKeys
                secret_key:
                  Fn::GetAtt:
                  - HostKeys
                  - SecretAccessKey
                s3_bucket: !Ref S3BucketName
                s3_region: !Ref 'AWS::Region'
                magic_string: fL3YHeP1cmCHH5FWm1PKaO7cdo0VXkabAgiSEestXYZDgAiQcDCsTiWpOaukB1e9
              mode: '000700'
              owner: root
              group: root
            '/opt/nginx/nginx.conf':
              content: !Sub |
                events {
                  worker_connections  1024;
                }
                http {
                  upstream docker-registry {
                    server docker-registry:5000;
                  }

                  ## Set a variable to help us decide if we need to add the
                  ## 'Docker-Distribution-Api-Version' header.
                  ## The registry always sets this header.
                  ## In the case of nginx performing auth, the header will be unset
                  ## since nginx is auth-ing before proxying.
                  map $upstream_http_docker_distribution_api_version $docker_distribution_api_version {
                      '' 'registry/2.0';
                  }

                  server {
                    # Server options
                    listen       80 default_server;
                    listen       [::]:80 default_server;
                    charset utf-8;
                    client_max_body_size 0;

                    # required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)
                    chunked_transfer_encoding on;

                    # Authentication
                    auth_basic "Registry realm";
                    auth_basic_user_file /etc/nginx/conf.d/nginx.htpasswd;

                    # Proxy settings
                    location / {
                        # Do not allow connections from docker 1.5 and earlier
                        # docker pre-1.6.0 did not properly set the user agent on ping, catch "Go *" user agents
                        if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
                            return 404;
                        }

                        ## If $docker_distribution_api_version is empty, the header will not be added.
                        ## See the map directive above where this variable is defined.
                        add_header 'Docker-Distribution-Api-Version' $docker_distribution_api_version always;

                        access_log /var/log/nginx/docker.log;
                        proxy_pass http://docker-registry;
                        proxy_set_header Host $host;
                        proxy_read_timeout 900;
                    }
                  }
                }
              mode: '000644'
              owner: root
              group: root
            '/opt/docker-registry/htpasswd':
              content:
                Fn::Join:
                  - '\n'
                  - Ref: RegistryAuth
              mode: '000644'
              owner: root
              group: root
    Properties:
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 15
            VolumeType: gp2
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      SubnetId: !Ref SubnetId
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}
      SecurityGroupIds: 
        - !Ref EC2SecurityGroup
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -exv
          yum update -y
          # Install the files and packages from the metadata
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource MyEC2Instance --region ${AWS::Region}
          # Set up docker registry
          docker pull ${DockerImage}
          docker-compose -f /opt/docker-registry/docker-compose.yml up -d
          # Signal the status from cfn-init (via $?)
          # /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource MyEC2Instance --region ${AWS::Region}

Outputs:
  MyEc2Instance:
    Description: 'Private docker registry'
    Value: !Ref MyEC2Instance
  
